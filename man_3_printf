_printf(3)               Library Functions Manual               _printf(3)

NAME
		_printf - write output to stdout, the standard output stream

LIBRARY
		Non - Standard C library (main.h)

SYNOPSIS
		#include <unistd.h>
		#include <stdarg.h>
		#include <string.h>
		#include <limits.h>
		
		int _printf(const char *format, ...);

DESCRIPTION
		The _printf() function is similar to the printf() function, providing
		formatted output. It accepts a format string and additional arguments,
		formatting and printing the data according to the format specifier in
		the string. It writes output to stdout, the standard output stream.

	Format of the format string
		Format is a character string. The format string is composed of zero or more directives.

	Conversion specifiers
		A character that specifies the type of conversion to be applied.
	   	The conversion specifiers and their meanings are:

		c      	The int argument is converted to an unsigned char, and the resulting character is
				written.

		d, i   	The int argument is converted to signed decimal notation.

		s      	If no l modifier is present: the const char * argument is
				expected to be a pointer to an array of character type
				(pointer to a string).  Characters from the array are
				written up to (but not including) a terminating null byte
				('\0'); if a precision is specified, no more than the
				number specified are written.  If a precision is given, no
				null byte need be present; if the precision is not
				specified, or is greater than the size of the array, the
				array must contain a terminating null byte.

				If an l modifier is present: the const wchar_t * argument
				is expected to be a pointer to an array of wide
				characters.  Wide characters from the array are converted
				to multibyte characters (each by a call to the wcrtomb(3)
				function, with a conversion state starting in the initial
				state before the first wide character), up to and
				including a terminating null wide character.  The
				resulting multibyte characters are written up to (but not
				including) the terminating null byte.  If a precision is
				specified, no more bytes than the number specified are
				written, but no partial multibyte characters are written.
				Note that the precision determines the number of bytes
				written, not the number of wide characters or screen
				positions.  The array must contain a terminating null wide
				character, unless a precision is given and it is so small
				that the number of bytes written exceeds it before the end
				of the array is reached.

		%      	A '%' is written.  No argument is converted.  The complete
				conversion specification is '%%'.

		Unlike the original version of the printf() function, the following elements are not being considered in _printf().
		 - buffer handling of the C library printf function
		 - flag characters
		 - field width
		 - precision
		 - length modifiers

RETURN VALUE
		Upon successful return, _printf() function returns the number of
		characters printed (excluding the null byte used to end output to
		strings).

		If an output error is encountered, a negative value is returned.

ATTRIBUTES
		None

STANDARDS
		None

HISTORY
		None

BUGS
		None

EXAMPLES
	Four examples that cover the basic usage of each conversion specifier in the _printf() function.

    - %c: Print a character.
		#include <stdio.h>
		#include "your_printf_header.h"

		int main(void) {
			char myChar = 'A';
			_printf("Character: %c\n", myChar);
			return 0;
		}

	- %s: Print a string.
		#include <stdio.h>
		#include "your_printf_header.h"

		int main(void) {
			const char* myString = "Hello, World!";
			_printf("String: %s\n", myString);
			return 0;
		}
	   
	- %d or %i: Print an integer.
		#include <stdio.h>
		#include "your_printf_header.h"

		int main(void) {
			int myInt = 42;
			_printf("Integer: %d\n", myInt);
			return 0;
		}

	- %%: Print a percent sign.
		#include <stdio.h>
		#include "your_printf_header.h"

		int main(void) {
			_printf("Percent Sign: %%\n");
			return 0;
		}

SEE ALSO
		printf(3), write(2), va_arg(3)