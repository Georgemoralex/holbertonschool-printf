_printf(3)               Library Functions Manual               _printf(3)

NAME
		_printf - write output to stdout, the standard output stream

LIBRARY
		Non - Standard C library (main.h)

SYNOPSIS
		#include <unistd.h>
		#include <stdarg.h>
		#include <string.h>
		#include <limits.h>
		
		int _printf(const char *format, ...);

DESCRIPTION
		The _printf() function is similar to the printf() function, providing
		formatted output. It accepts a format string and additional arguments,
		formatting and printing the data according to the format specifier in
		the string. It writes output to stdout, the standard output stream.

	Format of the format string
		Format is a character string. The format string is composed of zero or more directives.

	Conversion specifiers
		A character that specifies the type of conversion to be applied.
	   	The conversion specifiers and their meanings are:

		c      	The int argument is converted to an unsigned char, and the resulting character is written.

		d, i   	This conversion specificier is used to print integers, when using this conversion specifier, 
			a print_number subfunction is called where the int argument is converted to signed decimal notation.

		s      	This conversion specifier is used to print a string. It calls a function called print_function
			that takes a string (str) and a pointer to an integer (count) as parameter.
			it checks if the string is not NULL. If not, it writes the string to the standard output.
			if the string is NULL, it writes the string ¨(null)¨ to the standard output.

		%      	A '%' is written.  No argument is converted.  The complete conversion specification is '%%'.

		Unlike the original version of the printf() function, the following elements are not being considered in _printf().
		 - buffer handling of the C library printf function
		 - flag characters
		 - field width
		 - precision
		 - length modifiers

RETURN VALUE
		Upon successful return, _printf() function returns the number of
		characters printed (excluding the null byte used to end output to
		strings).

		If an output error is encountered, a negative value is returned.

ATTRIBUTES
		None

STANDARDS
		None

HISTORY
		None

BUGS
		None

EXAMPLES
	Four examples that cover the basic usage of each conversion specifier in the _printf() function.

    - %c: Print a character.
		#include <stdio.h>
		#include "your_printf_header.h"

		int main(void) {
			char myChar = 'A';
			_printf("Character: %c\n", myChar);
			return 0;
		}

	- %s: Print a string.
		#include <stdio.h>
		#include "your_printf_header.h"

		int main(void) {
			const char* myString = "Hello, World!";
			_printf("String: %s\n", myString);
			return 0;
		}
	   
	- %d or %i: Print an integer.
		#include <stdio.h>
		#include "your_printf_header.h"

		int main(void) {
			int myInt = 42;
			_printf("Integer: %d\n", myInt);
			return 0;
		}

	- %%: Print a percent sign.
		#include <stdio.h>
		#include "your_printf_header.h"

		int main(void) {
			_printf("Percent Sign: %%\n");
			return 0;
		}

SEE ALSO
		printf(3), write(2), va_arg(3)
